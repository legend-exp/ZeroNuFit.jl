name: CI

on:
  push:
    branches:
      - main
      - dev
      - 'releases/**'
    tags: '*'
  pull_request:
    branches:
      - main
      - dev
      - 'releases/**'
  release:

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.version == 'nightly' }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.11'
          - '1'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64
        include:
          - version: 1
            os: ubuntu-latest
            arch: x86
          - version: 1
            os: macOS-latest
            arch: arm64
          - version: 1
            os: windows-latest
            arch: x64
    steps:
      - uses: actions/checkout@v4

      # Set up Julia
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}

            # Conda setup for 32-bit environment (if x86 architecture)
      - name: Set up Conda (32-bit)
        if: matrix.arch == 'x86'
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: 'latest'
          auto-update-conda: true
          conda-arch: x86  # Ensure Conda installs 32-bit Python

      # Install Python and necessary dependencies (numpy for PyCall)
      - name: Install dependencies for 32-bit Python
        if: matrix.arch == 'x86'
        run: |
          conda install -y python=3.8 numpy

      # Update Julia packages
      - name: Update Julia packages
        run: |
          julia -e 'using Pkg; Pkg.update()'  # Automatically update packages

      # Cache dependencies
      - uses: julia-actions/cache@v2

      # Build Julia package
      - uses: julia-actions/julia-buildpkg@v1

      # Run tests
      - uses: julia-actions/julia-runtest@v1
        with:
          coverage: ${{ matrix.version == '1' && matrix.os == 'ubuntu-latest' && matrix.arch == 'x64' }}

      # Process coverage (optional)
      - uses: julia-actions/julia-processcoverage@v1
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'

      # Upload to Codecov (optional)
      - uses: codecov/codecov-action@v5
        if: matrix.version == '1' && matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
